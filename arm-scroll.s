	//
	// Assembler program to scroll text in terminal using C64 fonts
	//   Author: krzysztof.kielak@gmail.com
	//   Date:   2023-01-30
	//
	// Assemble & Link:
	// ----------------
	//    $ as -o exit.o exit.s
	//    $ ld -o exitos exit.o -lSystem -syslibroot `xcrun -sdk macosx \
	//         --show-sdk-path` -e _start -arch arm64
	//  or:
	//    $ gcc -o exitos exit.o
	//
	// TO GET MORE VERBOSE OUTPUT FROM GCC ON ASSEMBLY GENERATON:
	//    $ gcc -S -fverbose-asm -O0 t.c
	//
	// TO DISASSEMBLE THE BINARY:
	//    $ objdump -S --disassemble exitos > exitos.txt
	//
	.section __TEXT,__text,regular,pure_instructions
	.global  _start, _main		// Provide program starting address to linker

	.align 	 2

	// SYSCALL numbers for Mach-O architecture for ARM64
	// X0-X2 - parameters to linux function services
	// X16   - SYSCALL function number
	SYS_exit   =       1
	SYS_write  =       4
        SYS_select =      93
	
	// _start entry point is required for linking with ld
	// _main  entry point is required for linking with gcc
_start:	
_main:
	adr	x15, scroll_text	// number of scorll iterations
	mov	w14, 0			// bit counter in X14/W14
.scrl:
	ands	w14, w14, #7		// every 8 bits, get new character
	b.ne	.next

	ldrb	w4, [x15], #1		// get next character
	cmp	w4, #0
	b.eq	.end
	bl	get_char
.next:
	bl	scroll
	
        adrp 	x1, buff@PAGE	 	// string to print (page addr)
	add	x1, x1, buff@PAGEOFF+79	// adjust for offset on page & last char in line
	adrp	x2, char@PAGE
	add	x2, x2, char@PAGEOFF
	mov	w4, 8
.l01:
	mov	w6, '#'
	ldrb	w5, [x2]
	ands	wzr, w5, #128		// check 8th bit without destroying w5 register
	b.ne	.skip
	mov	w6, ' '
.skip:
	strb	w6, [x1], #81		// write bit repr. to buff and adjust pointer to
					// ... the next line

	lsl	w5, w5, #1		// shift temp char bits left
	strb	w5, [x2], #1		// ... and store back to the temp buffer
	
	subs	w4, w4, #1
	b.ne	.l01
	
	// Setup the parameters to print the buffer
        adrp 	x1, buff@PAGE	 	// string to print (page addr)
	add	x1, x1, buff@PAGEOFF	// adjust for offset on page
        mov 	x2,  (81*8)  		// length of our string
	bl	print

	bl	delay
	
	// Setup the parameters to print cursor movement characters
        adrp 	x1, goup@PAGE 		// string to print (page address)
	add	x1, x1, goup@PAGEOFF	// adjust for offset on page
        mov 	x2,  4  		// length of our string
	bl	print
	
	add	w14, w14, #1
	b	.scrl

.end:
        adrp 	x1, godown@PAGE 	// string to print
	add	x1, x1, godown@PAGEOFF
        mov 	x2,  4  		// length of our string
	bl	print
	
	b	exit

	// copy character to the temp character buffer
	// ------------------------------------------------------------------------------
get_char:
	adr	x13, c64charset
	adrp	x2, char@PAGE
	add	x2, x2, char@PAGEOFF

	// find the offset of the character
	mov	w5, w4
	cmp	w4, #32			// if less then #32 -> do nothing
	b.le	.noact
	sub	w5, w5, #64		// ... otherwise subtract #64
.noact:
	add	w5, w5, w5		// calculate the offset in charset
	add	w5, w5, w5
	add	w5, w5, w5

	ldr	x3, [x13, x5]		// get 8 byte character definition
	str	x3, [x2]		// ... and copy it to temp buffer

	ret
	
	// scroll the buffer
	// ------------------------------------------------------------------------------
scroll:
	stp	x1, x4, [sp, #-16]!	// we can use pairs or registers via STP/LDP
	stp	x5, x6, [sp, #-16]!	// ... SP has to be aligned to 16 bytes
	
	adrp	x1, buff@PAGE
	add	x1, x1, buff@PAGEOFF
	mov	x6, 8			// number of lines
.line:
	mov	x5, 79			// number of characters in the line
.copy:
	ldrb	w4, [x1, #1]
	strb	w4, [x1]
	add	x1, x1, #1
	subs	x5, x5, #1
	b.ne	.copy

	add	x1, x1, #2		// go to the address for the next line
	subs	x6, x6, #1
	b.ne	.line

	ldp	x5, x6, [sp], #16	// restore pair of registers from stack
	ldp	x1, x4, [sp], #16	
	
	ret

scroll_display_buffer:
	adrp	x1, display_buffer@PAGE
	add	x1, x1, display_buffer@PAGEOFF
	add	x2, x1, 1
	mov	x3, (80*24-1)
.l02:
	ldrb	w4, [x2], #1
	strb	w4, [x1], #1
	subs	x3, x3, #1
	b.ne	.l02

	ret

simple_display:
	adrp	x1, buff@PAGE
	add	x1, x1, buff@PAGEOFF
	adrp	x2, display_buffer@PAGE
	add	x2, x2, display_buffer@PAGEOFF
	add	x2, x2, 80*8		// select middle 8x lines in a display_buffer
	
	mov	x6, 8			// number of lines
.line02:
	ldr	x5, [x2], #8
	str	x5, [x1], #8
	ldr	x5, [x2], #8
	str	x5, [x1], #8
	ldr	x5, [x2], #8
	str	x5, [x1], #8
	ldr	x5, [x2], #8
	str	x5, [x1], #8
	ldr	x5, [x2], #8
	str	x5, [x1], #8
	ldr	x5, [x2], #8
	str	x5, [x1], #8
	ldr	x5, [x2], #8
	str	x5, [x1], #8
	ldr	x5, [x2], #8
	str	x5, [x1], #8
	ldr	x5, [x2], #8
	str	x5, [x1], #8
	ldr	x5, [x2], #8
	str	x5, [x1], #8
	
	add	x1, x1, #1
	subs	x6, x6, #1
	b.ne	.line02

	ret

	// call appropriate SYSCALL to print string out.		
	// ------------------------------------------------------------------------------
print:	
        mov 	x16, SYS_write     	// macOS write system call
	mov 	x0,  1 		  	// 1 = STDOUT
        svc 	0			// Call syscall to output the string
	ret	

	// NOTE: Instead of a busy wait we call select on descriptor 1 with timeout value
	// ------------------------------------------------------------------------------
delay:
	mov	x16, SYS_select		// Apple Silicon SELECT syscall number
	mov	x0, 2
	adr	x1, fdset
	mov	x2, 0
	mov	x3, 0
	adr	x4, timeval
	svc	0	
	ret

	// Setup the parameters to exit the program
	// and then call SYSCALL to do it.
	// ------------------------------------------------------------------------------
exit:	
        mov     x16, SYS_exit    	// Service command code 1 terminates this program
        mov     x0,  #0     		// Use 0 return code
        svc     0           		// Call syscall to terminate the program

scroll_text:
	.ascii	"HELLO FROM ARM"
	.ascii	"          "
	.byte 	0

	.align 2
	
	// STRUCTURE HAS BEEN CREATED WITH FOLLOWING C CODE
	//
	// fd_set *fds;
	// fds = calloc(1, sizeof(fd_set));
	// FD_SET(1, fds);
	// dump(fds, sizeof(fd_set), 1);
fdset:
	.byte 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

	// STRUCTURE HAS BEEN CREATED WITH FOLLOWING C CODE
	//
	// struct timeval tv;
	// tv.tv_sec = 0;
	// tv.tv_usec = 10000;
	// dump(&tv, sizeof(struct timeval), 1);
timeval:
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xa0, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00

	// C64 CHARACTER SET
c64charset:
	.byte 0x3C, 0x66, 0x6E, 0x6E, 0x60, 0x62, 0x3C, 0x00
	.byte 0x18, 0x3C, 0x66, 0x7E, 0x66, 0x66, 0x66, 0x00
	.byte 0x7C, 0x66, 0x66, 0x7C, 0x66, 0x66, 0x7C, 0x00
	.byte 0x3C, 0x66, 0x60, 0x60, 0x60, 0x66, 0x3C, 0x00
	.byte 0x78, 0x6C, 0x66, 0x66, 0x66, 0x6C, 0x78, 0x00
	.byte 0x7E, 0x60, 0x60, 0x78, 0x60, 0x60, 0x7E, 0x00
	.byte 0x7E, 0x60, 0x60, 0x78, 0x60, 0x60, 0x60, 0x00
	.byte 0x3C, 0x66, 0x60, 0x6E, 0x66, 0x66, 0x3C, 0x00
	.byte 0x66, 0x66, 0x66, 0x7E, 0x66, 0x66, 0x66, 0x00
	.byte 0x3C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00
	.byte 0x1E, 0x0C, 0x0C, 0x0C, 0x0C, 0x6C, 0x38, 0x00
	.byte 0x66, 0x6C, 0x78, 0x70, 0x78, 0x6C, 0x66, 0x00
	.byte 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x7E, 0x00
	.byte 0x63, 0x77, 0x7F, 0x6B, 0x63, 0x63, 0x63, 0x00
	.byte 0x66, 0x76, 0x7E, 0x7E, 0x6E, 0x66, 0x66, 0x00
	.byte 0x3C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x00
	.byte 0x7C, 0x66, 0x66, 0x7C, 0x60, 0x60, 0x60, 0x00
	.byte 0x3C, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x0E, 0x00
	.byte 0x7C, 0x66, 0x66, 0x7C, 0x78, 0x6C, 0x66, 0x00
	.byte 0x3C, 0x66, 0x60, 0x3C, 0x06, 0x66, 0x3C, 0x00
	.byte 0x7E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00
	.byte 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x00
	.byte 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x00
	.byte 0x63, 0x63, 0x63, 0x6B, 0x7F, 0x77, 0x63, 0x00
	.byte 0x66, 0x66, 0x3C, 0x18, 0x3C, 0x66, 0x66, 0x00
	.byte 0x66, 0x66, 0x66, 0x3C, 0x18, 0x18, 0x18, 0x00
	.byte 0x7E, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x7E, 0x00
	.byte 0x3C, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3C, 0x00
	.byte 0x0C, 0x12, 0x30, 0x7C, 0x30, 0x62, 0xFC, 0x00
	.byte 0x3C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x3C, 0x00
	.byte 0x00, 0x18, 0x3C, 0x7E, 0x18, 0x18, 0x18, 0x18
	.byte 0x00, 0x10, 0x30, 0x7F, 0x7F, 0x30, 0x10, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x18, 0x00
	.byte 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x66, 0x66, 0xFF, 0x66, 0xFF, 0x66, 0x66, 0x00
	.byte 0x18, 0x3E, 0x60, 0x3C, 0x06, 0x7C, 0x18, 0x00
	.byte 0x62, 0x66, 0x0C, 0x18, 0x30, 0x66, 0x46, 0x00
	.byte 0x3C, 0x66, 0x3C, 0x38, 0x67, 0x66, 0x3F, 0x00
	.byte 0x06, 0x0C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x0C, 0x18, 0x30, 0x30, 0x30, 0x18, 0x0C, 0x00
	.byte 0x30, 0x18, 0x0C, 0x0C, 0x0C, 0x18, 0x30, 0x00
	.byte 0x00, 0x66, 0x3C, 0xFF, 0x3C, 0x66, 0x00, 0x00
	.byte 0x00, 0x18, 0x18, 0x7E, 0x18, 0x18, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30
	.byte 0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00
	.byte 0x00, 0x03, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x00
	.byte 0x3C, 0x66, 0x6E, 0x76, 0x66, 0x66, 0x3C, 0x00
	.byte 0x18, 0x18, 0x38, 0x18, 0x18, 0x18, 0x7E, 0x00
	.byte 0x3C, 0x66, 0x06, 0x0C, 0x30, 0x60, 0x7E, 0x00
	.byte 0x3C, 0x66, 0x06, 0x1C, 0x06, 0x66, 0x3C, 0x00
	.byte 0x06, 0x0E, 0x1E, 0x66, 0x7F, 0x06, 0x06, 0x00
	.byte 0x7E, 0x60, 0x7C, 0x06, 0x06, 0x66, 0x3C, 0x00
	.byte 0x3C, 0x66, 0x60, 0x7C, 0x66, 0x66, 0x3C, 0x00
	.byte 0x7E, 0x66, 0x0C, 0x18, 0x18, 0x18, 0x18, 0x00
	.byte 0x3C, 0x66, 0x66, 0x3C, 0x66, 0x66, 0x3C, 0x00
	.byte 0x3C, 0x66, 0x66, 0x3E, 0x06, 0x66, 0x3C, 0x00
	.byte 0x00, 0x00, 0x18, 0x00, 0x00, 0x18, 0x00, 0x00
	.byte 0x00, 0x00, 0x18, 0x00, 0x00, 0x18, 0x18, 0x30
	.byte 0x0E, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0E, 0x00
	.byte 0x00, 0x00, 0x7E, 0x00, 0x7E, 0x00, 0x00, 0x00
	.byte 0x70, 0x18, 0x0C, 0x06, 0x0C, 0x18, 0x70, 0x00
	.byte 0x3C, 0x66, 0x06, 0x0C, 0x18, 0x00, 0x18, 0x00
	.byte 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00
	.byte 0x08, 0x1C, 0x3E, 0x7F, 0x7F, 0x1C, 0x3E, 0x00
	.byte 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18
	.byte 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00
	.byte 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30
	.byte 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C
	.byte 0x00, 0x00, 0x00, 0xE0, 0xF0, 0x38, 0x18, 0x18
	.byte 0x18, 0x18, 0x1C, 0x0F, 0x07, 0x00, 0x00, 0x00
	.byte 0x18, 0x18, 0x38, 0xF0, 0xE0, 0x00, 0x00, 0x00
	.byte 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xFF, 0xFF
	.byte 0xC0, 0xE0, 0x70, 0x38, 0x1C, 0x0E, 0x07, 0x03
	.byte 0x03, 0x07, 0x0E, 0x1C, 0x38, 0x70, 0xE0, 0xC0
	.byte 0xFF, 0xFF, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0
	.byte 0xFF, 0xFF, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03
	.byte 0x00, 0x3C, 0x7E, 0x7E, 0x7E, 0x7E, 0x3C, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00
	.byte 0x36, 0x7F, 0x7F, 0x7F, 0x3E, 0x1C, 0x08, 0x00
	.byte 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60
	.byte 0x00, 0x00, 0x00, 0x07, 0x0F, 0x1C, 0x18, 0x18
	.byte 0xC3, 0xE7, 0x7E, 0x3C, 0x3C, 0x7E, 0xE7, 0xC3
	.byte 0x00, 0x3C, 0x7E, 0x66, 0x66, 0x7E, 0x3C, 0x00
	.byte 0x18, 0x18, 0x66, 0x66, 0x18, 0x18, 0x3C, 0x00
	.byte 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06
	.byte 0x08, 0x1C, 0x3E, 0x7F, 0x3E, 0x1C, 0x08, 0x00
	.byte 0x18, 0x18, 0x18, 0xFF, 0xFF, 0x18, 0x18, 0x18
	.byte 0xC0, 0xC0, 0x30, 0x30, 0xC0, 0xC0, 0x30, 0x30
	.byte 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18
	.byte 0x00, 0x00, 0x03, 0x3E, 0x76, 0x36, 0x36, 0x00
	.byte 0xFF, 0x7F, 0x3F, 0x1F, 0x0F, 0x07, 0x03, 0x01
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0
	.byte 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF
	.byte 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF
	.byte 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0
	.byte 0xCC, 0xCC, 0x33, 0x33, 0xCC, 0xCC, 0x33, 0x33
	.byte 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03
	.byte 0x00, 0x00, 0x00, 0x00, 0xCC, 0xCC, 0x33, 0x33
	.byte 0xFF, 0xFE, 0xFC, 0xF8, 0xF0, 0xE0, 0xC0, 0x80
	.byte 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03
	.byte 0x18, 0x18, 0x18, 0x1F, 0x1F, 0x18, 0x18, 0x18
	.byte 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x0F, 0x0F
	.byte 0x18, 0x18, 0x18, 0x1F, 0x1F, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0xF8, 0xF8, 0x18, 0x18, 0x18
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF
	.byte 0x00, 0x00, 0x00, 0x1F, 0x1F, 0x18, 0x18, 0x18
	.byte 0x18, 0x18, 0x18, 0xFF, 0xFF, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x18, 0x18, 0x18
	.byte 0x18, 0x18, 0x18, 0xF8, 0xF8, 0x18, 0x18, 0x18
	.byte 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0
	.byte 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0
	.byte 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07
	.byte 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00
	.byte 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF
	.byte 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0xFF, 0xFF
	.byte 0x00, 0x00, 0x00, 0x00, 0xF0, 0xF0, 0xF0, 0xF0
	.byte 0x0F, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00
	.byte 0x18, 0x18, 0x18, 0xF8, 0xF8, 0x00, 0x00, 0x00
	.byte 0xF0, 0xF0, 0xF0, 0xF0, 0x00, 0x00, 0x00, 0x00
	.byte 0xF0, 0xF0, 0xF0, 0xF0, 0x0F, 0x0F, 0x0F, 0x0F
	
	.section __DATA, __data

char:
	.space	8
	.align	2

buff:
	.ascii	"                                                                                "
	.byte	10	
	.ascii	"                                                                                "
	.byte	10	
	.ascii	"                                                                                "
	.byte	10	
	.ascii	"                                                                                "
	.byte	10	
	.ascii	"                                                                                "
	.byte	10	
	.ascii	"                                                                                "
	.byte	10	
	.ascii	"                                                                                "
	.byte	10	
	.ascii	"                                                                                "
	.byte	10	

display_buffer:
	.space	80*24, 32
	
goup:	
	.byte	27
	.ascii 	"[8A"

godown:	
	.byte	27
	.ascii 	"[8B"
